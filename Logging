internal class Program
{
    static void Main(string[] args)
    {
        var pathfinders = new List<Pathfinder>
        {
            new Pathfinder(new FileLogWritter()),
            new Pathfinder(new ConsoleLogWritter()),
            new Pathfinder(new SecureLogger(new FileLogWritter())),
            new Pathfinder(new SecureLogger(new ConsoleLogWritter())),
            new Pathfinder(new CombinedLogger(new List<ILogger>
            {
                new ConsoleLogWritter(),
                new SecureLogger(new FileLogWritter())
            }))
        };

        foreach (var pathfinder in pathfinders)
        {
            pathfinder.Find();
        }
    }
}

public interface ILogger
{
    public void Write(string message);
}

public class FileLogWritter : ILogger
{
    private readonly string _logFilePath = "log.txt";

    public void Write(string message)
    {
        if (message == null)
            throw new ArgumentNullException(nameof(message));

        File.AppendAllText(_logFilePath, message);
    }
}

public class ConsoleLogWritter : ILogger
{
    public void Write(string message)
    {
        if (message == null)
            throw new ArgumentNullException(nameof(message));

        Console.WriteLine(message);
    }
}

public class SecureLogger : ILogger
{
    private readonly ILogger _innerLogger;
    private readonly DayOfWeek _secureDay;

    public SecureLogger(ILogger innerLogger, DayOfWeek secureDay = DayOfWeek.Friday)
    {
        _innerLogger = innerLogger ?? throw new ArgumentNullException(nameof(innerLogger));
        _secureDay = secureDay;
    }

    public void Write(string message)
    {
        if (message == null)
            throw new ArgumentNullException(nameof(message));

        if (DateTime.Now.DayOfWeek == _secureDay)
            _innerLogger.Write(message);
    }
}

public class CombinedLogger : ILogger
{
    private readonly List<ILogger> _loggers;

    public CombinedLogger(List<ILogger> loggers)
    {
        _loggers = loggers ?? throw new ArgumentNullException(nameof(loggers));
    }

    public void Write(string message)
    {
        if (message == null)
            throw new ArgumentNullException(nameof(message));

        foreach (var logger in _loggers)
            logger.Write(message);
    }
}

public class Pathfinder
{
    private readonly ILogger _logger;

    public Pathfinder(ILogger logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public void Find()
    {
        string message = "Finding something!";
        _logger.Write(message);
    }
}
