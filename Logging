lass Program
{
    static void Main(string[] args)
    {
        var loggers = new List<ILogger>
        {
            new FileLogWritter(),
            new ConsoleLogWritter(),
            new SecureFileLogWritter(new FileLogWritter()),
            new SecureConsoleLogWritter(new ConsoleLogWritter()),
            new CombinedLogger(new List<ILogger> {new ConsoleLogWritter(), new FileLogWritter()})
        };

        foreach (var logger in loggers)
        {
            Pathfinder pathfinder = new Pathfinder(logger);
            pathfinder.Find();
        }
    }
}

public interface ILogger
{
    public void Write(string message);
}

public class FileLogWritter : ILogger
{
    public void Write(string message)
    {
        File.AppendAllText("log.txt", message);
    }
}

public class ConsoleLogWritter : ILogger
{
    public void Write(string message)
    {
        Console.WriteLine(message);
    }
}

public class SecureFileLogWritter : ILogger
{
    private readonly ILogger _innerLogger;
    private readonly DayOfWeek _secureDay;

    public SecureFileLogWritter(ILogger innerLogger)
    {
        _innerLogger = innerLogger;
        _secureDay = DayOfWeek.Friday;
    }

    public void Write(string message)
    {
        if (DateTime.Now.DayOfWeek == _secureDay)
        {
            _innerLogger.Write(message);
        }
    }
}

public class SecureConsoleLogWritter : ILogger
{
    private readonly ILogger _innerLogger;
    private readonly DayOfWeek _secureDay;

    public SecureConsoleLogWritter(ILogger innerLogger)
    {
        _innerLogger = innerLogger;
        _secureDay = DayOfWeek.Friday;
    }

    public void Write(string message)
    {
        if (DateTime.Now.DayOfWeek == _secureDay)
        {
            _innerLogger.Write(message);
        }
    }
}

public class CombinedLogger : ILogger
{
    private readonly List<ILogger> _loggers;

    public CombinedLogger(List<ILogger> loggers)
    {
        _loggers = loggers;
    }

    public void Write(string message)
    {
        foreach (var logger in _loggers)
        {
            logger.Write(message);
        }
    }
}

public class Pathfinder
{
    private readonly ILogger _logger;

    public Pathfinder(ILogger logger)
    {
        _logger = logger;
    }

    public void Find()
    {
        string message = "Finding something!";
        _logger.Write(message);
    }
}
